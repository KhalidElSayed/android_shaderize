
precision mediump float;

uniform float uAmbientFactor;
uniform float uDiffuseFactor;
uniform float uSpecularFactor;
uniform float uShininess;

varying vec4 vPosition;
varying vec4 vNormal;
varying vec4 vColor;

void main() {
	float diffuse = 0.0;
	float specular = 0.0;
	vec3 lightDir = vec3(0.0, 0.0, -1.0) - vPosition.xyz;
	vec3 N = normalize(vNormal.xyz);
	vec3 L = normalize(lightDir);			
	float lambert = dot(N, L);
	if (lambert > 0.0) {
		diffuse = lambert * uDiffuseFactor;
		vec3 R = reflect(-L, N);
		vec3 E = normalize(-vPosition.xyz);
		specular = pow(max(dot(R, E), 0.0), uShininess) * uSpecularFactor;
	}
	gl_FragColor = vColor * (uAmbientFactor + diffuse + specular);
}
